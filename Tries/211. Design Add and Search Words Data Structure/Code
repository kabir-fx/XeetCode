# For methods 1,2 refer: 208

class Node:
    def __init__(self):
        self.ends = False
        self.child = {}

class WordDictionary:

    def __init__(self):
        self.root = Node()

    def addWord(self, word: str) -> None:
        cur = self.root
        
        for c in word:
            if c not in cur.child:
                cur.child[c] = Node()
            
            cur = cur.child[c]
        
        cur.ends = True

    # For '.' we use recursive DFS function to go thru all the values present in each children whilst incrementing the index,if we find a node which returns True: i.e, has the ends as -> True, we return True for above else we continue on the for the next child on same iteration.

    def search(self, word: str) -> bool:
        # Function which takes index(From where we hv to start iteraton) and the current node
        # Base case for the function (apart from the char not matching) is the ends attribute of the last node returning a Boolean. For the condition where last word is '.' we check that node's ends attribute.
        def dfs(j, node):
            cur = node

            for i in range(j, len(word)):
                if word[i] == '.' :
                    # Iteratively checking the values of all the children whilts incrementing the val of i.
                    for child in cur.child.values():
                        # Iteratively checking for all the values in each child and so on if the next word is also '.'
                        # Notice the val of i remanins the same for each child
                        if dfs(i+1, child):
                            return True
                    return False

                else:
                    if word[i] not in cur.child:
                        return False
                    
                    cur = cur.child[word[i]]
            
            # The node present here is the last node whether from recursion or iteration and hence we return its ends value(bool)
            return cur.ends
        
        return dfs(0, self.root)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
