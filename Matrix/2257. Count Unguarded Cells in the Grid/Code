class Solution:
    def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:
        grid = [[0] * n for _ in range(m)]
        # 0 -> free; 1 -> guard; 2 -> wall; 3 -> guarded

        # Place guards and walls in the grid
        for r, c in guards:
            grid[r][c] = 1
        for r, c in walls:
            grid[r][c] = 2

        # Directional sweeps for guarding cells
        for r in range(m):
            # Left-to-right
            guarded = False
            for c in range(n):
                if grid[r][c] == 1:  # Guard found
                    guarded = True
                elif grid[r][c] == 2:  # Wall found
                    guarded = False
                elif guarded:
                    grid[r][c] = 3  # Mark as guarded

            # Right-to-left
            guarded = False
            for c in reversed(range(n)):
                if grid[r][c] == 1:  # Guard found
                    guarded = True
                elif grid[r][c] == 2:  # Wall found
                    guarded = False
                elif guarded:
                    grid[r][c] = 3  # Mark as guarded

        for c in range(n):
            # Top-to-bottom
            guarded = False
            for r in range(m):
                if grid[r][c] == 1:  # Guard found
                    guarded = True
                elif grid[r][c] == 2:  # Wall found
                    guarded = False
                elif guarded:
                    grid[r][c] = 3  # Mark as guarded

            # Bottom-to-top
            guarded = False
            for r in reversed(range(m)):
                if grid[r][c] == 1:  # Guard found
                    guarded = True
                elif grid[r][c] == 2:  # Wall found
                    guarded = False
                elif guarded:
                    grid[r][c] = 3  # Mark as guarded

        # Count unguarded cells
        res = 0
        for r in range(m):
            for c in range(n):
                if grid[r][c] == 0:  # Free and unguarded
                    res += 1

        return res
