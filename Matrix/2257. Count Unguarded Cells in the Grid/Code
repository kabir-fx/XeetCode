class Solution:
    def countUnguarded(self, m: int, n: int, gaurds: List[List[int]], walls: List[List[int]]) -> int:
        # Intuition is to mark all the spaces in matrix with the nomeclature given below and at the count only 0.
        # Nomeclature
        # 0 -> free; 1 -> gaurd; 2 -> wall; 3 -> gaurded

        # Initialize a grid
        grid = [[0] * n for _ in range(m)]
        
        # Mark all the gaurds
        for r,c in gaurds:
            grid[r][c] = 1
        
        # Mark all the walls
        for r,c in walls:
            grid[r][c] = 2
        
        # Now iterate thru all elements and mark the position as gaurded first for all the rows in both directions and then for col also in both directions

        # For Rows
        for r in range(m):
            # Left to Right
            gaurded = False
            for c in range(n):
                if grid[r][c] == 1:
                    gaurded = True
                elif grid[r][c] == 2:
                    gaurded = False
                elif gaurded:
                    grid[r][c] = 3

            # Right to Left
            gaurded = False
            for c in reversed(range(n)):
                if grid[r][c] == 1:
                    gaurded = True
                elif grid[r][c] == 2:
                    gaurded = False
                elif gaurded:
                    grid[r][c] = 3
        
        # For col
        for c in range(n):
            # Top to bottom
            gaurded = False
            for r in range(m):
                if grid[r][c] == 1:
                    gaurded = True
                elif grid[r][c] == 2:
                    gaurded = False
                elif gaurded:
                    grid[r][c] = 3

            # Right to Left
            gaurded = False
            for r in reversed(range(m)):
                if grid[r][c] == 1:
                    gaurded = True
                elif grid[r][c] == 2:
                    gaurded = False
                elif gaurded:
                    grid[r][c] = 3

        # Final Iteration
        res = 0
        for r in range(m):
            for c in range(n):
                if grid[r][c] == 0:
                    res += 1

        return res 
