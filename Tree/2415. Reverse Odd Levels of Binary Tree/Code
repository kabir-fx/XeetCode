# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def reverseOddLevels(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        # Intuition is to use BFS[Level Order Traversal, since we hv to change the values at each level] and for each odd lvl interchange the values at 2 ends of the queue using 2 pointers

        # Since the queue holds references to the actual TreeNode objects, modifying the val attribute of a node in the queue directly updates the tree

        q = deque([root])

        lvl = 0

        while q:
            # Check whether the lvl is odd 
            if lvl & 1:
                l,r = 0, len(q) -1

                while l < r:
                    q[l].val, q[r].val = q[r].val, q[l].val
                    
                    # Increment and Decrement the pointers
                    l += 1
                    r -= 1

            for _ in range(len(q)):
                node = q.popleft()

                if node.left:
                    q.append(node.left)
                
                if node.right:
                    q.append(node.right)
            
            lvl += 1
        
        return root
